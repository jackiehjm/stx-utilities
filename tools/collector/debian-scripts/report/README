Refer to report.py file header for a description of the tool

Example:

Consider the following collect bundle structure

SELECT_NODES_20220527.193605
├── controller-0_20220527.193605
│   ├── etc
│   ├── root
│   └── var
├── controller-1_20220527.193605
│   ├── etc
│   ├── root
│   └── var
└── report_analysis (where the output files will be placed)

> cat plugins/alarm

algorithm=alarm
alarm_exclude=400., 800.
entity_exclude=subsystem=vim

> cat plugins/substring

algorithm=substring
files=var/log/mtcAgent.log, var/log/sm.log
hosts=controllers
substring=operation failed
substring=Failed to send message

> report/report.py --start 20220501 --end 20220530

Running the command above will populate the report folder with output files.
The tool also provides default values, more details are in 'report.py -h'.

The substring algorithm creates an output file for every host of the
specified host type. The files will contain log events within the
provided date range containing the substring 'operation failed' and 'Failed
to send message'.

The alarm algorithm creates two output file: 'log' and 'alarm'
'log' contains customer log messages created within the provided date range,
and 'alarm' contains system alarms created within the provided date range, as
long as the alarm ids and entity ids are not included in the alarm plugin file.

For more detailed information about an algorithm use 'report.py <algorithm> -h'.

Here is the report directory after running the above command

.
├── ALL_NODES_20221211.214001.tar
└── report_analysis
    ├── correlator_alarms
    ├── correlator_events
    ├── correlator_failures
    ├── correlator_state_changes
    ├── plugins
    │   ├── alarm
    │   ├── daemon_failures
    │   ├── heartbeat_loss
    │   ├── log
    │   ├── maintenance_errors
    │   ├── process_failures
    │   ├── puppet_errors
    │   ├── state_changes
    │   ├── substring_compute-0
    │   ├── substring_compute-1
    │   ├── substring_compute-2
    │   ├── substring_controller-0
    │   ├── substring_controller-1
    │   ├── swact_activity
    │   └── system_info
    ├── report.log
    └── untar.log

The report tool also allows users to point it at any collect bundle and
have it automatically extract the tarball and tar files for each host
before running.

The report tool can be run to analyze a collect bundle either on or off
system by specifying the bundle to analyze using the --directory or
-d <directory> command option.

> report/tool/report.py -d <directory containing collect bundle>

Users may specify if they want the correlator to only find events,
alarm transitions, and state changes for a specific host.

> report/tool/report.py --hostname controller-0

The report tool can also be run automatically during the collect
by using the collect --report or -r option. The report_analysis
will be tared and included in the collect bundle when the --report
option is used.
